/* The following code was generated by JFlex 1.4.3 on 5/7/11 1:42 AM */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* FLOOD
* Lexical Analyzer
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/7/11 1:42 AM from the specification file
 * <tt>flood_lex.flex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\3\2\0\1\4\22\0\1\5\1\67\1\57\2\0"+
    "\1\74\1\72\1\0\1\64\1\65\1\12\1\61\1\60\1\6\1\7"+
    "\1\11\12\2\1\0\1\75\1\70\1\66\1\71\2\0\1\42\1\46"+
    "\1\1\1\13\1\51\1\24\2\1\1\45\2\1\1\20\1\33\1\31"+
    "\1\1\1\54\1\1\1\50\1\40\1\37\1\35\1\44\1\52\3\1"+
    "\1\76\1\0\1\77\1\0\1\1\1\0\1\21\1\1\1\25\1\43"+
    "\1\14\1\15\1\22\1\53\1\16\2\1\1\47\1\32\1\17\1\27"+
    "\2\1\1\36\1\30\1\26\1\23\1\56\1\1\1\34\1\55\1\41"+
    "\1\62\1\73\1\63\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\17\2\1\1\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\2\1"+
    "\1\25\1\26\1\27\1\30\2\0\16\2\1\31\6\2"+
    "\1\0\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\2\0\3\2\1\42\4\2\1\43\1\44\2\2"+
    "\1\45\1\2\1\46\6\2\1\0\1\47\7\2\1\50"+
    "\1\51\3\2\1\52\1\53\2\2\1\54\4\2\1\55"+
    "\11\2\1\56\7\2\1\57\2\2\1\60\1\2\1\61"+
    "\3\2\1\62\1\2\1\63\22\2\1\64\3\2\1\65"+
    "\6\2\1\66\1\67\1\70\1\2\1\71\1\2\1\72"+
    "\2\2\1\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\100\0\u0100\0\100\0\u0140"+
    "\0\100\0\u0180\0\u01c0\0\100\0\u0200\0\u0240\0\u0280\0\u02c0"+
    "\0\u0300\0\u0340\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0"+
    "\0\u0500\0\u0540\0\u0580\0\u05c0\0\100\0\100\0\100\0\100"+
    "\0\100\0\100\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740"+
    "\0\100\0\u0780\0\100\0\100\0\u07c0\0\u0800\0\u0840\0\u0880"+
    "\0\u08c0\0\u0900\0\u0940\0\u0980\0\u09c0\0\u0a00\0\u0a40\0\u0a80"+
    "\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\200\0\u0bc0\0\u0c00\0\u0c40"+
    "\0\u0c80\0\u0cc0\0\u0d00\0\u05c0\0\100\0\100\0\100\0\100"+
    "\0\100\0\100\0\100\0\u07c0\0\u0d40\0\u0d80\0\u0dc0\0\u0e00"+
    "\0\u0e40\0\200\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\200\0\200"+
    "\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\200\0\u1080\0\u10c0\0\u1100"+
    "\0\u1140\0\u1180\0\u11c0\0\u1200\0\100\0\u1240\0\u1280\0\u12c0"+
    "\0\u1300\0\u1340\0\u1380\0\u13c0\0\200\0\200\0\u1400\0\u1440"+
    "\0\u1480\0\200\0\200\0\u14c0\0\u1500\0\200\0\u1540\0\u1580"+
    "\0\u15c0\0\u1600\0\200\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740"+
    "\0\u1780\0\u17c0\0\u1800\0\u1840\0\200\0\u1880\0\u18c0\0\u1900"+
    "\0\u1940\0\u1980\0\u19c0\0\u1a00\0\200\0\u1a40\0\u1a80\0\200"+
    "\0\u1ac0\0\200\0\u1b00\0\u1b40\0\u1b80\0\200\0\u1bc0\0\200"+
    "\0\u1c00\0\u1c40\0\u1c80\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u1dc0"+
    "\0\u1e00\0\u1e40\0\u1e80\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u1fc0"+
    "\0\u2000\0\u2040\0\200\0\u2080\0\u20c0\0\u2100\0\200\0\u2140"+
    "\0\u2180\0\u21c0\0\u2200\0\u2240\0\u2280\0\200\0\200\0\200"+
    "\0\u22c0\0\200\0\u2300\0\200\0\u2340\0\u2380\0\200";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\4\3\1\16\3\3\1\17"+
    "\6\3\1\20\1\3\1\21\1\3\1\22\1\23\1\3"+
    "\1\24\1\3\1\25\1\26\1\27\1\3\1\30\1\31"+
    "\1\32\1\3\1\33\2\3\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\101\0\2\3\10\0"+
    "\44\3\23\0\1\4\4\0\1\55\73\0\1\5\76\0"+
    "\1\4\105\0\1\12\101\0\1\56\66\0\2\3\10\0"+
    "\1\3\1\57\42\3\22\0\2\3\10\0\1\3\1\60"+
    "\42\3\22\0\2\3\10\0\6\3\1\61\25\3\1\62"+
    "\7\3\22\0\2\3\10\0\3\3\1\63\2\3\1\64"+
    "\35\3\22\0\2\3\10\0\15\3\1\65\26\3\22\0"+
    "\2\3\10\0\23\3\1\66\20\3\22\0\2\3\10\0"+
    "\1\3\1\67\11\3\1\70\30\3\22\0\2\3\10\0"+
    "\12\3\1\71\10\3\1\72\4\3\1\73\13\3\22\0"+
    "\2\3\10\0\14\3\1\74\27\3\22\0\2\3\10\0"+
    "\2\3\1\75\1\3\1\76\37\3\22\0\2\3\10\0"+
    "\14\3\1\77\27\3\22\0\2\3\10\0\1\3\1\100"+
    "\42\3\22\0\2\3\10\0\34\3\1\101\7\3\22\0"+
    "\2\3\10\0\40\3\1\102\3\3\22\0\2\3\10\0"+
    "\34\3\1\103\7\3\21\0\57\104\1\105\20\104\66\0"+
    "\1\106\77\0\1\107\77\0\1\110\77\0\1\111\103\0"+
    "\1\112\100\0\1\113\101\0\1\52\4\0\1\114\75\0"+
    "\12\115\1\116\65\115\1\0\2\3\10\0\2\3\1\117"+
    "\41\3\22\0\2\3\10\0\6\3\1\120\35\3\22\0"+
    "\2\3\10\0\34\3\1\121\7\3\22\0\2\3\10\0"+
    "\13\3\1\122\30\3\22\0\2\3\10\0\4\3\1\123"+
    "\37\3\22\0\2\3\10\0\21\3\1\124\22\3\22\0"+
    "\2\3\10\0\1\3\1\125\42\3\22\0\2\3\10\0"+
    "\10\3\1\126\33\3\22\0\2\3\10\0\13\3\1\127"+
    "\30\3\22\0\2\3\10\0\23\3\1\130\20\3\22\0"+
    "\2\3\10\0\13\3\1\131\30\3\22\0\2\3\10\0"+
    "\23\3\1\132\20\3\22\0\2\3\10\0\30\3\1\133"+
    "\13\3\22\0\2\3\10\0\3\3\1\134\40\3\22\0"+
    "\2\3\10\0\13\3\1\135\30\3\22\0\2\3\10\0"+
    "\14\3\1\136\27\3\22\0\2\3\10\0\13\3\1\137"+
    "\3\3\1\140\24\3\22\0\2\3\10\0\15\3\1\141"+
    "\26\3\22\0\2\3\10\0\3\3\1\142\40\3\22\0"+
    "\2\3\10\0\6\3\1\143\35\3\21\0\12\115\1\144"+
    "\65\115\11\0\1\145\1\116\66\0\2\3\10\0\3\3"+
    "\1\146\40\3\22\0\2\3\10\0\7\3\1\147\34\3"+
    "\22\0\2\3\10\0\15\3\1\150\26\3\22\0\2\3"+
    "\10\0\22\3\1\151\1\3\1\152\17\3\22\0\2\3"+
    "\10\0\22\3\1\153\1\3\1\154\17\3\22\0\2\3"+
    "\10\0\23\3\1\155\20\3\22\0\2\3\10\0\1\3"+
    "\1\156\42\3\22\0\2\3\10\0\3\3\1\157\40\3"+
    "\22\0\2\3\10\0\6\3\1\160\35\3\22\0\2\3"+
    "\10\0\41\3\1\161\2\3\22\0\2\3\10\0\30\3"+
    "\1\162\13\3\22\0\2\3\10\0\34\3\1\163\7\3"+
    "\22\0\2\3\10\0\10\3\1\164\33\3\22\0\2\3"+
    "\10\0\14\3\1\165\27\3\22\0\2\3\10\0\1\3"+
    "\1\166\42\3\22\0\2\3\10\0\34\3\1\167\7\3"+
    "\22\0\2\3\10\0\42\3\1\170\1\3\21\0\11\115"+
    "\1\145\1\144\65\115\1\0\2\3\10\0\4\3\1\171"+
    "\37\3\22\0\2\3\10\0\10\3\1\172\33\3\22\0"+
    "\2\3\10\0\1\3\1\173\42\3\22\0\2\3\10\0"+
    "\15\3\1\174\26\3\22\0\2\3\10\0\1\3\1\175"+
    "\42\3\22\0\2\3\10\0\15\3\1\176\26\3\22\0"+
    "\2\3\10\0\1\3\1\177\42\3\22\0\2\3\10\0"+
    "\14\3\1\200\27\3\22\0\2\3\10\0\42\3\1\201"+
    "\1\3\22\0\2\3\10\0\34\3\1\202\7\3\22\0"+
    "\2\3\10\0\23\3\1\203\20\3\22\0\2\3\10\0"+
    "\43\3\1\204\22\0\2\3\10\0\1\3\1\205\42\3"+
    "\22\0\2\3\10\0\1\3\1\206\42\3\22\0\2\3"+
    "\10\0\1\3\1\207\42\3\22\0\2\3\10\0\1\3"+
    "\1\210\42\3\22\0\2\3\10\0\1\3\1\211\42\3"+
    "\22\0\2\3\10\0\6\3\1\212\35\3\22\0\2\3"+
    "\10\0\1\3\1\213\42\3\22\0\2\3\10\0\6\3"+
    "\1\214\35\3\22\0\2\3\10\0\4\3\1\215\37\3"+
    "\22\0\2\3\10\0\5\3\1\216\36\3\22\0\2\3"+
    "\10\0\6\3\1\217\35\3\22\0\2\3\10\0\4\3"+
    "\1\220\37\3\22\0\2\3\10\0\1\3\1\221\42\3"+
    "\22\0\2\3\10\0\23\3\1\222\20\3\22\0\2\3"+
    "\10\0\5\3\1\223\3\3\1\224\32\3\22\0\2\3"+
    "\10\0\16\3\1\225\25\3\22\0\2\3\10\0\23\3"+
    "\1\226\20\3\22\0\2\3\10\0\17\3\1\227\24\3"+
    "\22\0\2\3\10\0\23\3\1\230\20\3\22\0\2\3"+
    "\10\0\17\3\1\231\24\3\22\0\2\3\10\0\1\3"+
    "\1\232\42\3\22\0\2\3\10\0\42\3\1\233\1\3"+
    "\22\0\2\3\10\0\41\3\1\234\2\3\22\0\2\3"+
    "\10\0\1\3\1\235\42\3\22\0\2\3\10\0\10\3"+
    "\1\236\33\3\22\0\2\3\10\0\6\3\1\237\35\3"+
    "\22\0\2\3\10\0\25\3\1\240\16\3\22\0\2\3"+
    "\10\0\25\3\1\241\16\3\22\0\2\3\10\0\4\3"+
    "\1\242\37\3\22\0\2\3\10\0\1\3\1\243\42\3"+
    "\22\0\2\3\10\0\34\3\1\244\7\3\22\0\2\3"+
    "\10\0\6\3\1\245\35\3\22\0\2\3\10\0\4\3"+
    "\1\246\37\3\22\0\2\3\10\0\17\3\1\247\24\3"+
    "\22\0\2\3\10\0\3\3\1\250\40\3\22\0\2\3"+
    "\10\0\3\3\1\251\40\3\22\0\2\3\10\0\7\3"+
    "\1\252\34\3\22\0\2\3\10\0\23\3\1\253\20\3"+
    "\22\0\2\3\10\0\6\3\1\254\35\3\22\0\2\3"+
    "\10\0\7\3\1\255\34\3\22\0\2\3\10\0\12\3"+
    "\1\256\31\3\22\0\2\3\10\0\1\3\1\257\42\3"+
    "\22\0\2\3\10\0\26\3\1\260\15\3\22\0\2\3"+
    "\10\0\26\3\1\261\15\3\22\0\2\3\10\0\13\3"+
    "\1\262\30\3\22\0\2\3\10\0\42\3\1\263\1\3"+
    "\22\0\2\3\10\0\10\3\1\264\33\3\22\0\2\3"+
    "\10\0\13\3\1\265\30\3\22\0\2\3\10\0\1\3"+
    "\1\266\42\3\22\0\2\3\10\0\1\3\1\267\42\3"+
    "\22\0\2\3\10\0\40\3\1\270\3\3\22\0\2\3"+
    "\10\0\1\3\1\271\42\3\22\0\2\3\10\0\1\3"+
    "\1\272\42\3\22\0\2\3\10\0\3\3\1\273\40\3"+
    "\22\0\2\3\10\0\23\3\1\274\20\3\22\0\2\3"+
    "\10\0\14\3\1\275\27\3\22\0\2\3\10\0\4\3"+
    "\1\276\37\3\22\0\2\3\10\0\15\3\1\277\26\3"+
    "\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9152];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\1\1\1\11\1\1\1\11"+
    "\2\1\1\11\20\1\6\11\6\1\1\11\1\1\2\11"+
    "\2\0\25\1\1\0\7\11\1\1\2\0\25\1\1\0"+
    "\1\11\132\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Parser yyparser;

  public Yylex(java.io.Reader r, Parser yyparser)
  {
    this(r);
    this.yyparser = yyparser;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 39: 
          { /* ignore */
          }
        case 60: break;
        case 23: 
          { yyparser.yycolumn++; return Parser.OPEN_SQUARE;
          }
        case 61: break;
        case 22: 
          { yyparser.yycolumn += yytext().length();
                    return Parser.SEMICOLON;
          }
        case 62: break;
        case 29: 
          { yyparser.yycolumn++; return Parser.LESSEQUAL;
          }
        case 63: break;
        case 12: 
          { yyparser.yycolumn++; return Parser.PLUS;
          }
        case 64: break;
        case 28: 
          { yyparser.yycolumn++; return Parser.NOTEQUAL;
          }
        case 65: break;
        case 16: 
          { yyparser.yycolumn++;return Parser.CLOSE_PARAN;
          }
        case 66: break;
        case 38: 
          { yyparser.yycolumn += yytext().length(); return Parser.Int;
          }
        case 67: break;
        case 34: 
          { yyparser.yycolumn += yytext().length(); return Parser.Flt;
          }
        case 68: break;
        case 54: 
          { yyparser.yycolumn += yytext().length(); return Parser.MinTeamSize;
          }
        case 69: break;
        case 36: 
          { yyparser.yycolumn += yytext().length(); return Parser.Str;
          }
        case 70: break;
        case 37: 
          { yyparser.yycolumn += yytext().length(); return Parser.Add;
          }
        case 71: break;
        case 6: 
          { yyparser.yycolumn++; return Parser.MINUS;
          }
        case 72: break;
        case 47: 
          { yyparser.yycolumn += yytext().length(); return Parser.Action;
          }
        case 73: break;
        case 4: 
          { yyparser.yycolumn = 0;
                    yyparser.yyline++;
          }
        case 74: break;
        case 2: 
          { yyparser.yycolumn += yytext().length();
                    yyparser.yylval = new ParserVal(yytext());
                    return Parser.ID;
          }
        case 75: break;
        case 21: 
          { yyparser.yycolumn++; return Parser.MOD;
          }
        case 76: break;
        case 35: 
          { yyparser.yycolumn += yytext().length(); return Parser.Set;
          }
        case 77: break;
        case 57: 
          { yyparser.yycolumn += yytext().length(); return Parser.DefineLeague;
          }
        case 78: break;
        case 45: 
          { yyparser.yycolumn += yytext().length(); return Parser.False;
          }
        case 79: break;
        case 5: 
          { yyparser.yycolumn++;
          }
        case 80: break;
        case 10: 
          { yyparser.yycolumn++; return Parser.MULT;
          }
        case 81: break;
        case 52: 
          { yyparser.yycolumn += yytext().length(); return Parser.AddPlayer;
          }
        case 82: break;
        case 7: 
          { yyparser.yycolumn++; return Parser.DOT;
          }
        case 83: break;
        case 50: 
          { yyparser.yycolumn += yytext().length(); return Parser.MinUser;
          }
        case 84: break;
        case 59: 
          { yyparser.yycolumn += yytext().length(); return Parser.DefineFunctions;
          }
        case 85: break;
        case 17: 
          { yyparser.yycolumn++; return Parser.EQUAL;
          }
        case 86: break;
        case 9: 
          { yyparser.yycolumn++; return Parser.DIV;
          }
        case 87: break;
        case 58: 
          { yyparser.yycolumn += yytext().length(); return Parser.RemovePlayer;
          }
        case 88: break;
        case 19: 
          { yyparser.yycolumn++;return Parser.LESS;
          }
        case 89: break;
        case 31: 
          { yyparser.yycolumn++; return Parser.AND;
          }
        case 90: break;
        case 18: 
          { yyparser.yycolumn++; return Parser.NOT;
          }
        case 91: break;
        case 25: 
          { yyparser.yycolumn += yytext().length(); return Parser.If;
          }
        case 92: break;
        case 15: 
          { yyparser.yycolumn++;return Parser.OPEN_PARAN;
          }
        case 93: break;
        case 51: 
          { yyparser.yycolumn += yytext().length(); return Parser.MaxUser;
          }
        case 94: break;
        case 27: 
          { yyparser.yycolumn++; return Parser.ISEQUAL;
          }
        case 95: break;
        case 49: 
          { yyparser.yycolumn += yytext().length(); return Parser.Player;
          }
        case 96: break;
        case 3: 
          { yyparser.yycolumn += yytext().length();
                    yyparser.yylval = new ParserVal(Integer.parseInt(yytext()));
                    return Parser.INT;
          }
        case 97: break;
        case 30: 
          { yyparser.yycolumn++; return Parser.GREATEQUAL;
          }
        case 98: break;
        case 8: 
          { yyparser.yycolumn += yytext().length();
          }
        case 99: break;
        case 24: 
          { yyparser.yycolumn++; return Parser.CLOSE_SQUARE;
          }
        case 100: break;
        case 53: 
          { yyparser.yycolumn += yytext().length(); return Parser.LeagueName;
          }
        case 101: break;
        case 40: 
          { yyparser.yycolumn += yytext().length(); return Parser.User;
          }
        case 102: break;
        case 32: 
          { yyparser.yycolumn++; return Parser.OR;
          }
        case 103: break;
        case 46: 
          { yyparser.yycolumn += yytext().length(); return Parser.While;
          }
        case 104: break;
        case 44: 
          { yyparser.yycolumn += yytext().length(); return Parser.Else;
          }
        case 105: break;
        case 33: 
          { yyparser.yycolumn += yytext().length();
                    yyparser.yylval = new ParserVal(Double.parseDouble(yytext()));
                    return Parser.FLT;
          }
        case 106: break;
        case 55: 
          { yyparser.yycolumn += yytext().length(); return Parser.MaxTeamSize;
          }
        case 107: break;
        case 13: 
          { yyparser.yycolumn++; return Parser.OPEN_CURLY;
          }
        case 108: break;
        case 42: 
          { yyparser.yycolumn += yytext().length(); return Parser.Void;
          }
        case 109: break;
        case 11: 
          { yyparser.yycolumn++; return Parser.COMMA;
          }
        case 110: break;
        case 41: 
          { yyparser.yycolumn += yytext().length(); return Parser.True;
          }
        case 111: break;
        case 1: 
          { System.err.println("Error: unexpected character '" + yytext() + "'");
                    return -1;
          }
        case 112: break;
        case 48: 
          { yyparser.yycolumn += yytext().length(); return Parser.Return;
          }
        case 113: break;
        case 26: 
          { yyparser.yycolumn += yytext().length();
                    yyparser.yylval = new ParserVal(yytext());
                    return Parser.STRING_CONST;
          }
        case 114: break;
        case 14: 
          { yyparser.yycolumn++; return Parser.CLOSE_CURLY;
          }
        case 115: break;
        case 56: 
          { yyparser.yycolumn += yytext().length(); return Parser.ArrayLength;
          }
        case 116: break;
        case 20: 
          { yyparser.yycolumn++; return Parser.GREAT;
          }
        case 117: break;
        case 43: 
          { yyparser.yycolumn += yytext().length(); return Parser.Bool;
          }
        case 118: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return 0; }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
